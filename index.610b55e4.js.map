{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,G,E,I,A,W,M,A,U,wI,G,CCGA,IAAM,EAAQ,CACZ,KAAM,YACN,MAAO,aACP,GAAI,UACJ,KAAM,WACR,EAEM,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAS,SAAS,aAAa,CAAC,WAChC,EAAQ,SAAS,aAAa,CAAC,eAE/B,EAAQ,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CAGG,EAAa,EACb,EAAM,CAAA,EACJ,EAAe,EAAM,GAAG,CAAC,SAAA,CAA/B,EAAuC,OAAA,EAAG,E,GACtC,EAAiB,CAAA,EAErB,EAAO,gBAAgB,CAAC,QAAS,GAEjC,IAAM,EAAQ,SAAS,aAAa,CAAC,eAE/B,EAAU,WACd,IAAK,IAAI,EAAI,EAAG,EAZL,EAYe,IAIxB,IAAK,IAFC,EAAQ,AADF,EAAM,gBAAgB,CAAC,aAAa,CAAC,EAAE,CACjC,gBAAgB,CAAC,eAE1B,EAAI,EAAG,EAfJ,EAeiB,IAAK,CAChC,IAAM,EAAO,CAAK,CAAC,EAAE,CAErB,EAAK,YAAY,CAAC,KAAO,OAAkB,MAAA,CAAZ,EAAE,YAAY,MAAA,CAAF,IAI3C,EAAW,EAFI,CAAK,CAAC,EAAE,CAAC,EAAE,CAG5B,CAEF,IACA,GACF,EAEM,EAAe,WACnB,OAAO,EAAM,IAAI,CAAC,SAAA,CAAlB,EAAyB,OAAA,EAAI,IAAI,CAAC,SAAA,CAAT,EAAiB,OAAA,AAAS,IAAT,C,E,EAC5C,EAEM,EAAW,WACf,GAAI,IACF,MAAO,CAAA,EAGT,IAAK,IAAI,EAAI,EAAG,EAvCL,EAuCe,IACxB,IAAK,IAAI,EAAI,EAAG,EAxCP,EAwCiB,IACxB,GAAI,CAAK,CAAC,EAAE,CAAC,EAAE,GAAK,CAAK,CAAC,EAAE,CAAC,EAAI,EAAE,CACjC,MAAO,CAAA,EAKb,IAAK,IAAI,EAAI,EAAG,EAAI,EAAU,IAC5B,IAAK,IAAI,EAAI,EAAG,EAhDP,EAgDiB,IACxB,GAAI,CAAK,CAAC,EAAE,CAAC,EAAE,GAAK,CAAK,CAAC,EAAI,EAAE,CAAC,EAAE,CACjC,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,EAEM,EAAa,WACjB,IAAK,IAAI,EAAI,EAAG,EA3DL,EA2De,IACxB,IAAK,IAAI,EAAI,EAAG,EA3DJ,EA2DiB,IAAK,CAChC,IAAM,EAAO,SAAS,cAAc,CAAE,OAAkB,MAAA,CAAZ,EAAE,YAAY,MAAA,CAAF,GAExD,CAAA,CAAK,CAAC,EAAE,CAAC,EAAE,CAAG,EAEd,EAAK,SAAS,CAAG,GACjB,EAAK,SAAS,CAAC,KAAK,CAAG,GACvB,EAAK,SAAS,CAAC,GAAG,CAAC,aACrB,CAEF,EAAa,EACb,EAAM,SAAS,CAAG,CACpB,EAEM,EAAU,WACd,GAAK,KAOL,IAHA,IAAI,EAAQ,CAAA,EACN,EAAS,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,EAElC,CAAC,GAAO,CACb,IAAM,EAAM,KAAK,KAAK,CAAC,AAnFd,EAmFc,KAAK,MAAM,IAC5B,EAAS,KAAK,KAAK,CAAC,AAnFd,EAmFc,KAAK,MAAM,IAErC,GAAI,AAAuB,IAAvB,CAAK,CAAC,EAAI,CAAC,EAAO,CAAQ,CAC5B,CAAK,CAAC,EAAI,CAAC,EAAO,CAAG,EAErB,IAAM,EAAO,SAAS,cAAc,CAAE,OAAoB,MAAA,CAAd,EAAI,YAAiB,MAAA,CAAP,GAE1D,CAAA,EAAK,SAAS,CAAG,GAAU,MAAA,CAAP,GACpB,EAAK,SAAS,CAAC,GAAG,CAAE,eAAqB,MAAA,CAAP,IAClC,EAAQ,CAAA,CACV,CACF,CAEI,MACF,EAAY,SAAS,CAAC,MAAM,CAAC,UAE7B,EAAO,gBAAgB,CAAC,QAAS,WAC/B,EAAY,SAAS,CAAC,GAAG,CAAC,UAE1B,IACA,GACF,IAEJ,EAEM,EAAa,SAAC,CAAA,CAAM,CAA1B,EACE,EAAK,SAAS,CAAG,GACjB,EAAK,SAAS,CAAC,KAAK,CAAG,GACvB,EAAK,SAAS,CAAC,GAAG,CAAC,cAEf,EAAS,IACX,EAAK,SAAS,CAAG,EAEb,EAAS,KACX,EAAK,SAAS,CAAC,GAAG,CAAE,eAAqB,MAAA,CAAP,IAElC,EAAK,SAAS,CAAC,GAAG,CAAE,qBA5IL,OAgJf,IACF,EAAW,SAAS,CAAC,MAAM,CAAC,UAC5B,EAAM,CAAA,EAEV,EAEA,SAAS,gBAAgB,CAAC,QAAS,SAAA,CAAnC,EAGE,GAFA,EAAM,cAAc,IAEhB,GAIJ,OAAQ,EAAM,GAAG,EACf,KAAK,EAAM,IAAI,CACb,IACA,KACF,MAAK,EAAM,KAAK,CACd,IACA,KACF,MAAK,EAAM,EAAE,CACX,IACA,KACF,MAAK,EAAM,IAAI,CACb,IACA,KACF,SACE,MACJ,CAEA,SAAS,aAAa,CAAC,eAAe,SAAS,CAAG,EACpD,GAEA,IAAM,EAAa,SAAA,CAAnB,EAA0B,OAAA,EAAI,MAAM,CAAC,SAAA,CAAX,EAAkB,OAAA,AAAQ,IAAR,C,E,EAEtC,EAAQ,SAAC,CAAf,EACE,IAAI,EAAc,EAAG,GAErB,EAAa,EAAW,GAExB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAW,MAAM,CAAG,EAAG,IACrC,CAAU,CAAC,EAAE,GAAK,CAAU,CAAC,EAAI,EAAE,GACrC,CAAU,CAAC,EAAE,EAAI,EACjB,CAAU,CAAC,EAAI,EAAE,CAAG,EACpB,GAAc,CAAU,CAAC,EAAE,EAM/B,IAFA,EAAa,EAAW,GAEjB,EAAW,MAAM,CA7KV,GA8KZ,EAAW,IAAI,CAAC,GAGlB,OAAO,CACT,EAEM,EAAkB,SAAC,CAAA,CAAK,CAA9B,EACE,IAAI,EAAU,EAAG,EAEC,CAAA,UAAd,GACF,EAAO,OAAO,GAGhB,EAAS,EAAW,GAEpB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,MAAM,CAAG,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,EACb,CAAM,CAAC,EAAI,EAAE,CAAG,EAChB,GAAc,CAAM,CAAC,EAAE,EAM3B,IAFA,EAAS,EAAW,GAEb,EAAO,MAAM,CAvMN,GAwMZ,EAAO,IAAI,CAAC,GAOd,MAJkB,UAAd,GACF,EAAO,OAAO,GAGT,CACT,EAEM,EAAY,WAChB,IAAK,IAAI,EAAI,EAAG,EApNL,EAoNe,IAAK,CAE7B,IAAM,EAAS,EADH,CAAK,CAAC,EAAE,CACgB,OAEpC,CAAA,CAAK,CAAC,EAAE,CAAG,EAEX,IAAK,IAAI,EAAI,EAAG,EAzNJ,EAyNiB,IAI3B,EAHa,SAAS,cAAc,CAAE,OAAkB,MAAA,CAAZ,EAAE,YAAY,MAAA,CAAF,IACzC,CAAK,CAAC,EAAE,CAAC,EAAE,CAI9B,CAEI,EAAW,EAAc,IAC3B,GAEJ,EAEM,EAAa,WACjB,IAAK,IAAI,EAAI,EAAG,EAxOL,EAwOe,IAAK,CAE7B,IAAM,EAAS,EADH,CAAK,CAAC,EAAE,CACgB,QAEpC,CAAA,CAAK,CAAC,EAAE,CAAG,EAEX,IAAK,IAAI,EAAI,EAAG,EA7OJ,EA6OiB,IAI3B,EAHa,SAAS,cAAc,CAAE,OAAkB,MAAA,CAAZ,EAAE,YAAY,MAAA,CAAF,IACzC,CAAK,CAAC,EAAE,CAAC,EAAE,CAI9B,CAEI,EAAW,EAAc,IAC3B,GAEJ,EAEM,EAAU,WACd,IAAK,IAAI,EAAI,EAAG,EA3PF,EA2Pe,IAAK,CAChC,IAAI,EAAM,CAAC,CAAK,CAAC,EAAE,CAAC,EAAE,CAAE,CAAK,CAAC,EAAE,CAAC,EAAE,CAAE,CAAK,CAAC,EAAE,CAAC,EAAE,CAAE,CAAK,CAAC,EAAE,CAAC,EAAE,CAAC,CAE9D,EAAM,EAAM,GAEZ,IAAK,IAAI,EAAI,EAAG,EAjQP,EAiQiB,IACxB,CAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAG,CAAC,EAAE,CAKpB,EAHa,SAAS,cAAc,CAAE,OAAkB,MAAA,CAAZ,EAAE,YAAY,MAAA,CAAF,IACzC,CAAK,CAAC,EAAE,CAAC,EAAE,CAI9B,CAEI,EAAW,EAAc,IAC3B,GAEJ,EAEM,EAAY,WAChB,IAAK,IAAI,EAAI,EAAG,EAhRF,EAgRe,IAAK,CAChC,IAAI,EAAM,CAAC,CAAK,CAAC,EAAE,CAAC,EAAE,CAAE,CAAK,CAAC,EAAE,CAAC,EAAE,CAAE,CAAK,CAAC,EAAE,CAAC,EAAE,CAAE,CAAK,CAAC,EAAE,CAAC,EAAE,CAAC,CAE9D,EAAI,OAAO,GAEX,AADA,CAAA,EAAM,EAAM,EAAZ,EACI,OAAO,GAEX,IAAK,IAAI,EAAI,EAAG,EAxRP,EAwRiB,IACxB,CAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAG,CAAC,EAAE,CAKpB,EAHa,SAAS,cAAc,CAAE,OAAkB,MAAA,CAAZ,EAAE,YAAY,MAAA,CAAF,IACzC,CAAK,CAAC,EAAE,CAAC,EAAE,CAI9B,CAEI,EAAW,EAAc,IAC3B,GAEJ,EAEM,EAAa,SAAC,CAAA,CAAQ,CAA5B,EACE,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,MAAM,CAAE,IACjC,IAAK,IAAI,EAAI,EAAG,EAAI,CAAM,CAAC,EAAE,CAAC,MAAM,CAAE,IACpC,GAAI,CAAM,CAAC,EAAE,CAAC,EAAE,GAAK,CAAM,CAAC,EAAE,CAAC,EAAE,CAC/B,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,EAIA,SAAS,IACP,EAAW,SAAS,CAAC,GAAG,CAAC,UACzB,EAAM,CAAA,EACN,IACA,GACF,CAPA,EAAO,mBAAmB,CAAC,QAAS,GASpC,EAAO,gBAAgB,CAAC,QAAS,WAC3B,GACF,EAAa,SAAS,CAAC,GAAG,CAAC,UAC3B,EAAO,SAAS,CAAG,UACnB,EAAO,SAAS,CAAC,OAAO,CAAC,QAAS,WAElC,IACA,EAAiB,CAAA,IAEjB,EAAW,SAAS,CAAC,GAAG,CAAC,UACzB,EAAM,CAAA,EACN,IACA,IAEJ","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar WINNER_SCORE = 2048;\nvar ARROW = {\n    LEFT: \"ArrowLeft\",\n    RIGHT: \"ArrowRight\",\n    UP: \"ArrowUp\",\n    DOWN: \"ArrowDown\"\n};\nvar messageStart = document.querySelector(\".message-start\");\nvar messageLose = document.querySelector(\".message-lose\");\nvar messageWin = document.querySelector(\".message-win\");\nvar button = document.querySelector(\".button\");\nvar score = document.querySelector(\".game-score\");\nvar board = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nvar rows = 4;\nvar columns = 4;\nvar scoreCount = 0;\nvar won = false;\nvar initialBoard = board.map(function(row) {\n    return _to_consumable_array(row);\n});\nvar isInitialSetup = true;\nbutton.addEventListener(\"click\", restartGame);\nvar table = document.querySelector(\".game-field\");\nvar setGame = function() {\n    for(var r = 0; r < rows; r++){\n        var row = table.querySelectorAll(\".field-row\")[r];\n        var cells = row.querySelectorAll(\".field-cell\");\n        for(var c = 0; c < columns; c++){\n            var cell = cells[c];\n            cell.setAttribute(\"id\", \"row_\".concat(r, \"-column_\").concat(c));\n            var number = board[r][c];\n            updateCell(cell, number);\n        }\n    }\n    setCell();\n    setCell();\n};\nvar hasEmptyCell = function() {\n    return board.some(function(row) {\n        return row.some(function(cell) {\n            return cell === 0;\n        });\n    });\n};\nvar loseGame = function() {\n    if (hasEmptyCell()) return false;\n    for(var r = 0; r < rows; r++)for(var c = 0; c < rows; c++){\n        if (board[r][c] === board[r][c + 1]) return false;\n    }\n    for(var r1 = 0; r1 < rows - 1; r1++)for(var c1 = 0; c1 < rows; c1++){\n        if (board[r1][c1] === board[r1 + 1][c1]) return false;\n    }\n    return true;\n};\nvar clearBoard = function() {\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        var cell = document.getElementById(\"row_\".concat(r, \"-column_\").concat(c));\n        board[r][c] = 0;\n        cell.innerText = \"\";\n        cell.classList.value = \"\";\n        cell.classList.add(\"field-cell\");\n    }\n    scoreCount = 0;\n    score.innerHTML = scoreCount;\n};\nvar setCell = function() {\n    if (!hasEmptyCell()) return;\n    var found = false;\n    var number = Math.random() < 0.8 ? 2 : 4;\n    while(!found){\n        var row = Math.floor(Math.random() * rows);\n        var column = Math.floor(Math.random() * columns);\n        if (board[row][column] === 0) {\n            board[row][column] = number;\n            var cell = document.getElementById(\"row_\".concat(row, \"-column_\").concat(column));\n            cell.innerText = \"\".concat(number);\n            cell.classList.add(\"field-cell--\".concat(number));\n            found = true;\n        }\n    }\n    if (loseGame()) {\n        messageLose.classList.remove(\"hidden\");\n        button.addEventListener(\"click\", function() {\n            messageLose.classList.add(\"hidden\");\n            clearBoard();\n            restartGame();\n        });\n    }\n};\nvar updateCell = function(cell, number) {\n    cell.innerText = \"\";\n    cell.classList.value = \"\";\n    cell.classList.add(\"field-cell\");\n    if (number > 0) {\n        cell.innerText = number;\n        if (number < 4096) cell.classList.add(\"field-cell--\".concat(number));\n        else cell.classList.add(\"field-cell--8192\");\n    }\n    if (number === WINNER_SCORE) {\n        messageWin.classList.remove(\"hidden\");\n        won = true;\n    }\n};\ndocument.addEventListener(\"keyup\", function(arrow) {\n    arrow.preventDefault();\n    if (won) return;\n    switch(arrow.key){\n        case ARROW.LEFT:\n            slideLeft();\n            break;\n        case ARROW.RIGHT:\n            slideRight();\n            break;\n        case ARROW.UP:\n            slideUp();\n            break;\n        case ARROW.DOWN:\n            slideDown();\n            break;\n        default:\n            return;\n    }\n    document.querySelector(\".game-score\").innerText = scoreCount;\n});\nvar filterZero = function(row) {\n    return row.filter(function(num) {\n        return num !== 0;\n    });\n};\nvar slide = function(row) {\n    var initialRow = _to_consumable_array(row);\n    initialRow = filterZero(initialRow);\n    for(var i = 0; i < initialRow.length - 1; i++)if (initialRow[i] === initialRow[i + 1]) {\n        initialRow[i] *= 2;\n        initialRow[i + 1] = 0;\n        scoreCount += initialRow[i];\n    }\n    initialRow = filterZero(initialRow);\n    while(initialRow.length < columns)initialRow.push(0);\n    return initialRow;\n};\nvar slideHorizontal = function(row, direction) {\n    var newRow = _to_consumable_array(row);\n    if (direction === \"right\") newRow.reverse();\n    newRow = filterZero(newRow);\n    for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        newRow[i + 1] = 0;\n        scoreCount += newRow[i];\n    }\n    newRow = filterZero(newRow);\n    while(newRow.length < columns)newRow.push(0);\n    if (direction === \"right\") newRow.reverse();\n    return newRow;\n};\nvar slideLeft = function() {\n    for(var r = 0; r < rows; r++){\n        var row = board[r];\n        var newRow = slideHorizontal(row, \"left\");\n        board[r] = newRow;\n        for(var c = 0; c < columns; c++){\n            var cell = document.getElementById(\"row_\".concat(r, \"-column_\").concat(c));\n            var number = board[r][c];\n            updateCell(cell, number);\n        }\n    }\n    if (hasChanges(initialBoard, board)) setCell();\n};\nvar slideRight = function() {\n    for(var r = 0; r < rows; r++){\n        var row = board[r];\n        var newRow = slideHorizontal(row, \"right\");\n        board[r] = newRow;\n        for(var c = 0; c < columns; c++){\n            var cell = document.getElementById(\"row_\".concat(r, \"-column_\").concat(c));\n            var number = board[r][c];\n            updateCell(cell, number);\n        }\n    }\n    if (hasChanges(initialBoard, board)) setCell();\n};\nvar slideUp = function() {\n    for(var c = 0; c < columns; c++){\n        var row = [\n            board[0][c],\n            board[1][c],\n            board[2][c],\n            board[3][c]\n        ];\n        row = slide(row);\n        for(var r = 0; r < rows; r++){\n            board[r][c] = row[r];\n            var cell = document.getElementById(\"row_\".concat(r, \"-column_\").concat(c));\n            var number = board[r][c];\n            updateCell(cell, number);\n        }\n    }\n    if (hasChanges(initialBoard, board)) setCell();\n};\nvar slideDown = function() {\n    for(var c = 0; c < columns; c++){\n        var row = [\n            board[0][c],\n            board[1][c],\n            board[2][c],\n            board[3][c]\n        ];\n        row.reverse();\n        row = slide(row);\n        row.reverse();\n        for(var r = 0; r < rows; r++){\n            board[r][c] = row[r];\n            var cell = document.getElementById(\"row_\".concat(r, \"-column_\").concat(c));\n            var number = board[r][c];\n            updateCell(cell, number);\n        }\n    }\n    if (hasChanges(initialBoard, board)) setCell();\n};\nvar hasChanges = function(arrayA, arrayB) {\n    for(var i = 0; i < arrayA.length; i++)for(var j = 0; j < arrayA[i].length; j++){\n        if (arrayA[i][j] !== arrayB[i][j]) return true;\n    }\n    return false;\n};\nbutton.removeEventListener(\"click\", restartGame);\nfunction restartGame() {\n    messageWin.classList.add(\"hidden\");\n    won = false;\n    clearBoard();\n    setGame();\n}\nbutton.addEventListener(\"click\", function() {\n    if (isInitialSetup) {\n        messageStart.classList.add(\"hidden\");\n        button.innerText = \"Restart\";\n        button.classList.replace(\"start\", \"restart\");\n        setGame();\n        isInitialSetup = false;\n    } else {\n        messageWin.classList.add(\"hidden\");\n        won = false;\n        clearBoard();\n        setGame();\n    }\n});\n\n//# sourceMappingURL=index.610b55e4.js.map\n","'use strict';\n\nconst WINNER_SCORE = 2048;\nconst ARROW = {\n  LEFT: 'ArrowLeft',\n  RIGHT: 'ArrowRight',\n  UP: 'ArrowUp',\n  DOWN: 'ArrowDown',\n};\n\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst button = document.querySelector('.button');\nconst score = document.querySelector('.game-score');\n\nconst board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\nconst rows = 4;\nconst columns = 4;\nlet scoreCount = 0;\nlet won = false;\nconst initialBoard = board.map(row => [...row]);\nlet isInitialSetup = true;\n\nbutton.addEventListener('click', restartGame);\n\nconst table = document.querySelector('.game-field');\n\nconst setGame = () => {\n  for (let r = 0; r < rows; r++) {\n    const row = table.querySelectorAll('.field-row')[r];\n    const cells = row.querySelectorAll('.field-cell');\n\n    for (let c = 0; c < columns; c++) {\n      const cell = cells[c];\n\n      cell.setAttribute('id', `row_${r}-column_${c}`);\n\n      const number = board[r][c];\n\n      updateCell(cell, number);\n    }\n  }\n  setCell();\n  setCell();\n};\n\nconst hasEmptyCell = () => {\n  return board.some(row => row.some(cell => cell === 0));\n};\n\nconst loseGame = () => {\n  if (hasEmptyCell()) {\n    return false;\n  }\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < rows; c++) {\n      if (board[r][c] === board[r][c + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let r = 0; r < rows - 1; r++) {\n    for (let c = 0; c < rows; c++) {\n      if (board[r][c] === board[r + 1][c]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\nconst clearBoard = () => {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const cell = document.getElementById(`row_${r}-column_${c}`);\n\n      board[r][c] = 0;\n\n      cell.innerText = '';\n      cell.classList.value = '';\n      cell.classList.add('field-cell');\n    }\n  }\n  scoreCount = 0;\n  score.innerHTML = scoreCount;\n};\n\nconst setCell = () => {\n  if (!hasEmptyCell()) {\n    return;\n  }\n\n  let found = false;\n  const number = Math.random() < 0.8 ? 2 : 4;\n\n  while (!found) {\n    const row = Math.floor(Math.random() * rows);\n    const column = Math.floor(Math.random() * columns);\n\n    if (board[row][column] === 0) {\n      board[row][column] = number;\n\n      const cell = document.getElementById(`row_${row}-column_${column}`);\n\n      cell.innerText = `${number}`;\n      cell.classList.add(`field-cell--${number}`);\n      found = true;\n    }\n  }\n\n  if (loseGame()) {\n    messageLose.classList.remove('hidden');\n\n    button.addEventListener('click', () => {\n      messageLose.classList.add('hidden');\n\n      clearBoard();\n      restartGame();\n    });\n  }\n};\n\nconst updateCell = (cell, number) => {\n  cell.innerText = '';\n  cell.classList.value = '';\n  cell.classList.add('field-cell');\n\n  if (number > 0) {\n    cell.innerText = number;\n\n    if (number < 4096) {\n      cell.classList.add(`field-cell--${number}`);\n    } else {\n      cell.classList.add(`field-cell--8192`);\n    }\n  }\n\n  if (number === WINNER_SCORE) {\n    messageWin.classList.remove('hidden');\n    won = true;\n  }\n};\n\ndocument.addEventListener('keyup', arrow => {\n  arrow.preventDefault();\n\n  if (won) {\n    return;\n  }\n\n  switch (arrow.key) {\n    case ARROW.LEFT:\n      slideLeft();\n      break;\n    case ARROW.RIGHT:\n      slideRight();\n      break;\n    case ARROW.UP:\n      slideUp();\n      break;\n    case ARROW.DOWN:\n      slideDown();\n      break;\n    default:\n      return;\n  }\n\n  document.querySelector('.game-score').innerText = scoreCount;\n});\n\nconst filterZero = row => row.filter(num => num !== 0);\n\nconst slide = (row) => {\n  let initialRow = [...row];\n\n  initialRow = filterZero(initialRow);\n\n  for (let i = 0; i < initialRow.length - 1; i++) {\n    if (initialRow[i] === initialRow[i + 1]) {\n      initialRow[i] *= 2;\n      initialRow[i + 1] = 0;\n      scoreCount += initialRow[i];\n    }\n  }\n\n  initialRow = filterZero(initialRow);\n\n  while (initialRow.length < columns) {\n    initialRow.push(0);\n  }\n\n  return initialRow;\n};\n\nconst slideHorizontal = (row, direction) => {\n  let newRow = [...row];\n\n  if (direction === 'right') {\n    newRow.reverse();\n  }\n\n  newRow = filterZero(newRow);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      scoreCount += newRow[i];\n    }\n  }\n\n  newRow = filterZero(newRow);\n\n  while (newRow.length < columns) {\n    newRow.push(0);\n  }\n\n  if (direction === 'right') {\n    newRow.reverse();\n  }\n\n  return newRow;\n};\n\nconst slideLeft = () => {\n  for (let r = 0; r < rows; r++) {\n    const row = board[r];\n    const newRow = slideHorizontal(row, 'left');\n\n    board[r] = newRow;\n\n    for (let c = 0; c < columns; c++) {\n      const cell = document.getElementById(`row_${r}-column_${c}`);\n      const number = board[r][c];\n\n      updateCell(cell, number);\n    }\n  }\n\n  if (hasChanges(initialBoard, board)) {\n    setCell();\n  }\n};\n\nconst slideRight = () => {\n  for (let r = 0; r < rows; r++) {\n    const row = board[r];\n    const newRow = slideHorizontal(row, 'right');\n\n    board[r] = newRow;\n\n    for (let c = 0; c < columns; c++) {\n      const cell = document.getElementById(`row_${r}-column_${c}`);\n      const number = board[r][c];\n\n      updateCell(cell, number);\n    }\n  }\n\n  if (hasChanges(initialBoard, board)) {\n    setCell();\n  }\n};\n\nconst slideUp = () => {\n  for (let c = 0; c < columns; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    row = slide(row);\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n\n      const cell = document.getElementById(`row_${r}-column_${c}`);\n      const number = board[r][c];\n\n      updateCell(cell, number);\n    }\n  }\n\n  if (hasChanges(initialBoard, board)) {\n    setCell();\n  }\n};\n\nconst slideDown = () => {\n  for (let c = 0; c < columns; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n\n      const cell = document.getElementById(`row_${r}-column_${c}`);\n      const number = board[r][c];\n\n      updateCell(cell, number);\n    }\n  }\n\n  if (hasChanges(initialBoard, board)) {\n    setCell();\n  }\n};\n\nconst hasChanges = (arrayA, arrayB) => {\n  for (let i = 0; i < arrayA.length; i++) {\n    for (let j = 0; j < arrayA[i].length; j++) {\n      if (arrayA[i][j] !== arrayB[i][j]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nbutton.removeEventListener('click', restartGame);\n\nfunction restartGame() {\n  messageWin.classList.add('hidden');\n  won = false;\n  clearBoard();\n  setGame();\n}\n\nbutton.addEventListener('click', () => {\n  if (isInitialSetup) {\n    messageStart.classList.add('hidden');\n    button.innerText = 'Restart';\n    button.classList.replace('start', 'restart');\n\n    setGame();\n    isInitialSetup = false;\n  } else {\n    messageWin.classList.add('hidden');\n    won = false;\n    clearBoard();\n    setGame();\n  }\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","ARROW","LEFT","RIGHT","UP","DOWN","messageStart","document","querySelector","messageLose","messageWin","button","score","board","scoreCount","won","initialBoard","map","row","isInitialSetup","addEventListener","restartGame","table","setGame","r","cells","querySelectorAll","c","cell","setAttribute","concat","updateCell","setCell","hasEmptyCell","some","loseGame","r1","rows","c1","clearBoard","getElementById","innerText","classList","value","add","innerHTML","found","number","Math","random","floor","column","remove","arrow","preventDefault","key","slideLeft","slideRight","slideUp","slideDown","filterZero","filter","num","slide","initialRow","push","slideHorizontal","direction","newRow","reverse","hasChanges","arrayA","arrayB","j","removeEventListener","replace"],"version":3,"file":"index.610b55e4.js.map"}